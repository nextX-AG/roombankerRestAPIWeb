# Docker-Compose-Konfiguration für das evAlarm-IoT Gateway Management System
# Alle Dienste werden in separaten Containern definiert

version: '3.8'

services:
  # API-Gateway
  gateway:
    build:
      context: .
      dockerfile: docker/gateway/Dockerfile
    networks:
      - backend
    ports:
      - "8000:8000"
    depends_on:
      - api
      - processor
      - frontend
      - mongo
      - redis
    volumes:
      - ./gateway:/app

  # API-Service für Kernfunktionalität
  api:
    build:
      context: .
      dockerfile: docker/api/Dockerfile
    environment:
      - FLASK_ENV=docker
      - FLASK_APP=api/app.py
      - MONGODB_URI=mongodb://mongo:27017/
      - MONGODB_DB=evalarm_iot
      - REDIS_URL=redis://redis:6379/0
    networks:
      - backend
    volumes:
      - .:/app
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - mongo
      - redis

  # Processor-Service für Nachrichtenverarbeitung
  processor:
    build:
      context: .
      dockerfile: docker/processor/Dockerfile
    environment:
      - FLASK_ENV=docker
      - FLASK_APP=processor/app.py
      - MONGODB_URI=mongodb://mongo:27017/
      - MONGODB_DB=evalarm_iot
      - REDIS_URL=redis://redis:6379/0
    networks:
      - backend
    volumes:
      - .:/app
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - mongo
      - redis

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
    environment:
      - VITE_DOCKER=true
    networks:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - api
      - processor

  # MongoDB für Datenspeicherung
  mongo:
    image: mongo:6
    networks:
      - backend
    volumes:
      - mongo_data:/data/db
    command: --wiredTigerCacheSizeGB 1.0

  # Redis für Caching und Message Queue
  redis:
    image: redis:7
    networks:
      - backend
    volumes:
      - redis_data:/data

# Netzwerke
networks:
  backend:

# Volumes für persistente Daten
volumes:
  mongo_data:
  redis_data:
  frontend_node_modules:  # Separates volume for node_modules 