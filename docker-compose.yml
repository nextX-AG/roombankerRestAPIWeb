version: '3.8'

services:
  # API-Gateway
  gateway:
    build:
      context: .
      dockerfile: docker/Dockerfile.gateway
    ports:
      - "8000:8000"
    environment:
      - FLASK_ENV=docker
      - GATEWAY_PORT=8000
      - REDIS_HOST=redis
      - MONGODB_URI=mongodb://mongo:27017/
      - ALLOWED_ORIGINS=http://localhost,http://localhost:80,http://localhost:5173,http://127.0.0.1,http://127.0.0.1:80,http://127.0.0.1:5173,http://evalarm.nextxiot.com,https://evalarm.nextxiot.com
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
      api:
        condition: service_started
      auth:
        condition: service_started
      processor:
        condition: service_started
    networks:
      - evalarm_net
    volumes:
      - ./gateway:/app/gateway
      - ./utils:/app/utils
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/gateway/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # API-Service
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    ports:
      - "8080:8080"
    environment:
      - FLASK_ENV=docker
      - API_PORT=8080
      - REDIS_HOST=redis
      - MONGODB_URI=mongodb://mongo:27017/
      - ALLOWED_ORIGINS=http://localhost,http://localhost:80,http://localhost:5173,http://127.0.0.1,http://127.0.0.1:80,http://127.0.0.1:5173,http://evalarm.nextxiot.com,https://evalarm.nextxiot.com
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - evalarm_net
    volumes:
      - ./api:/app/api
      - ./utils:/app/utils
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Auth-Service
  auth:
    build:
      context: .
      dockerfile: docker/Dockerfile.auth
    ports:
      - "8081:8081"
    environment:
      - FLASK_ENV=docker
      - AUTH_PORT=8081
      - REDIS_HOST=redis
      - MONGODB_URI=mongodb://mongo:27017/
      - ALLOWED_ORIGINS=http://localhost,http://localhost:80,http://localhost:5173,http://127.0.0.1,http://127.0.0.1:80,http://127.0.0.1:5173,http://evalarm.nextxiot.com,https://evalarm.nextxiot.com
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - evalarm_net
    volumes:
      - ./auth:/app/auth
      - ./utils:/app/utils
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Processor-Service
  processor:
    build:
      context: .
      dockerfile: docker/Dockerfile.processor
    ports:
      - "8082:8082"
    environment:
      - FLASK_ENV=docker
      - PROCESSOR_PORT=8082
      - REDIS_HOST=redis
      - MONGODB_URI=mongodb://mongo:27017/
      - ALLOWED_ORIGINS=http://localhost,http://localhost:80,http://localhost:5173,http://127.0.0.1,http://127.0.0.1:80,http://127.0.0.1:5173,http://evalarm.nextxiot.com,https://evalarm.nextxiot.com
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - evalarm_net
    volumes:
      - ./api:/app/api
      - ./utils:/app/utils
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/api/v1/system/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend
  frontend:
    image: node:18
    working_dir: /app
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    ports:
      - "80:5173"
    environment:
      - VITE_DOCKER=true
      - VITE_ALLOWED_HOSTS=localhost,127.0.0.1,evalarm.nextxiot.com
    command: sh -c "npm install --legacy-peer-deps && npm run dev -- --host 0.0.0.0"
    depends_on:
      gateway:
        condition: service_healthy
    networks:
      - evalarm_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis für Message-Queue und Caching
  redis:
    image: redis:alpine
    ports:
      - "6380:6379"
    networks:
      - evalarm_net
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 3

  # MongoDB für persistente Daten
  mongo:
    image: mongo:5.0
    ports:
      - "27017:27017"
    networks:
      - evalarm_net
    volumes:
      - mongo_data_new:/data/db
    restart: always
    command: --wiredTigerCacheSizeGB 1
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 20s

networks:
  evalarm_net:
    driver: bridge

volumes:
  redis_data:
  mongo_data_new:
  frontend_node_modules:  # Separates volume for node_modules 